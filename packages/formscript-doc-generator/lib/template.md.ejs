# Formscript
### Version `<%= version %>`

[![Build Status](https://travis-ci.org/wmfs/formscript.svg?branch=master)](https://travis-ci.org/wmfs/formscript) [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwmfs%2Fformscript.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fwmfs%2Fformscript?ref=badge_shield) [![Known Vulnerabilities](https://snyk.io/test/github/wmfs/formscript/badge.svg?targetFile=package.json)](https://snyk.io/test/github/wmfs/formscript?targetFile=package.json) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lernajs.io/) [![Dependabot badge](https://img.shields.io/badge/Dependabot-active-brightgreen.svg)](https://dependabot.com/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/wmfs/formscript/blob/master/CONTRIBUTING.md)

__This document defines a [JSON](https://tools.ietf.org/html/rfc7159)-based language used to describe form-content declaratively.
The forms thus defined may be rendered and executed by software.
In this document, such software is referred to as an "app".__

## <a name="toc"></a>Table of Contents

* [Structure of a Form](#structure)
  * [Example: Simple Form](#example)
* [Concepts](#concepts)
  * [Apps](#app)
  * [Forms](#form)
  * [Widgets](#widget)
  * [Sets](#set)
  * [Expressions](#expression)
* [Reference](#reference)
  * [Top-Level Properties](#top-level)
  * [Widget Properties](#properties)
  * [Widget Attributes](#attributes)
  * [Widget List](#list)

## <a name="structure"></a>Structure of a Form

A Form is represented by a [JSON Object](https://tools.ietf.org/html/rfc7159#section-4]).

### <a name="example"></a>Example: Simple Form

The content of a form is specified by configuring one or more _widgets_, which are represented by JSON objects.

* In this example, a form is defined that contains two widgets, one that defines a suitable header (with some text and an accompanying image),
followed by a second widget for letting the user enter their name.

``` json
<%- simpleExample -%>

```

* The order that objects are defined within `widgets` is important, representing the order users will encounter them.

## <a name="concepts"></a>Concepts

Formscript is built on a handful of key concepts...

### <a name="app"></a>Apps

Forms defined in Formscript may be rendered and executed by software.
In this document, such software is referred to an "__app__".

* Apps can be implemented in any frontend-framework, language or library.
* Formscript does not impose any aesthetic or UI constraints onto apps that implement it.
* Formscript content can be embedded inside apps with [GUI](https://en.wikipedia.org/wiki/Graphical_user_interface), [CLI](https://en.wikipedia.org/wiki/Graphical_user_interface) and even [Voice-User](https://en.wikipedia.org/wiki/Voice_user_interface) interfaces.
* Perhaps as a fallback, Formscript content can even be rendered as a hard-copy paper form.
* Several utilities to help develop apps that use Formscript (written in Javascript) are published on [here on npmjs.com](https://www.npmjs.com/search?q=formscript) (the accompanying source code and related issues can be found [here](https://github.com/wmfs/formscript/tree/master/packages)).

### <a name="form"></a>Forms

The purpose of Formscript is to define a user interface, referred to as a "__form__".

* Using an app, forms are typically used to collect information from a user: but it's entirely possible to simply convey information using a form definition as well.
* With Formscript it's possible to configure a form with structure, validation, conditional content, dynamic values and context-sensitive behaviours (e.g. operating differently with an internet connection as opposed to without).
* Formscript definitions are naturally stored in `.json` files (typically one-file-per-form).
* In certain use-cases consider that [YAML](https://en.wikipedia.org/wiki/YAML) (itself just a superset of JSON) may offer a compelling alternative to serialising Formscript definitions in `.json` files.
* Please note that a [JSON Schema](http://json-schema.org/) is available [here](https://raw.githubusercontent.com/wmfs/formscript/master/packages/formscript-schema/lib/schema.json), which may be used to validate the basic integrity of Formscript content.
* For comprehensive Formscript validation, please refer to the [formscript-schema](https://www.npmjs.com/package/formscript-schema) package.

### <a name="widget"></a>Widgets

Forms are constructed from an ordered list of "__widgets__".

* To avoid overloading frontend-terms like 'component', Formscript refers to each object in the `widgets` array as a __widget__.
* Consider a widget as an area of a form responsible for a particular task: either collecting a specific piece of information from a user or visualising a certain piece of information.
* As such, widgets can be interactive (`text`, `number`, `map` etc.) and non-interactive (`heading`, `stickyNote` etc.)
* The order that `Widget` objects appear within a form definition is important - representing the order users will encounter them.
* The Formscript specification offers a fixed set of <%= widgets.length %> standard widgets. Need another widget-type entirely or an extra configuration options? [Pull requests are very welcome!](https://github.com/wmfs/Formscript/blob/master/CONTRIBUTING.md)

__Ahead of the [Reference](#reference) section, here's a quick summary of the <%= widgets.length %> widgets supported in Formscript `<%= version %>`:__

| Widget Type      | Description |
| -----------      | ----------- |
<% widgets.forEach(function(widget) { -%>
| [`<%= widget.type -%>`](#list-<%= widget.type -%>) | <%= widget.title %> |
<% }) %>

### <a name="set"></a>Sets

All the widgets that define a form's content are specified in a simple array.
This design helps align Formscript with vertical-scrolling interfaces with very little friction.
To assist with navigation (especially around larger, more complex forms) it is common for User Interfaces to be split into logical sections.

In Formscript,  __sets__ allow widgets to be grouped into related chunks.

* Each set begins with a `set` widget and ends with an `endSet` widget.
* Nesting of sets is possible and sets are especially powerful when combined with dynamic expressions to conditionally show/hide content.
* Sets enable apps to offer [progress tracking](https://www.smashingmagazine.com/2010/01/progress-trackers-in-web-design-examples-and-best-design-practices/) components.
* Multi-step "wizard" interfaces are also easily achieved via sets.


### <a name="expression"></a>Expressions

Formscript uses __expressions__ to deliver dynamic content. Expressions are used to:

* Conditionally show/hide widgets depending on values as they change.
* Validate form content based on more complex business rules.
* Affect the contents of enumerated lists.
* Default dynamic values.
* Calculate running totals, real-time summaries etc.

Consider an expression to be something that could be evaluated in a Javascript `if (...) {}` statement.

```json
<%- expressionExample -%>

```

__In the example above we have two widgets:__

* The first is a simple boolean on/off `switch` widget (with the `id` of `userWantsToGiveFeedback`) which is by default set to `false`.
* The second widget is a `textarea` box (with the `id` of `feedback`) for collecting feedback from the user.

The `feedback` widget should only show if the `userWantsToGiveFeedback` switch is thrown on (i.e. `true`).

There are a few new things going on here.
Most types of widget (here the `switch` and `textarea` types) expect an app to read and write their values to an underlying `data` object (using their respective `id` values as keys).
It is also expected that any app implementing Formscript should also make this `data` object available within a safe sandbox while evaluating expressions.

In the previous example we can see the `showWhen` attribute is being used on the `feedback` widget. The string value here is an _expression_, which will control the visibility of the widget (i.e. it should only be shown to the user when the expression evaluates to `true`).

#### <a name="sandbox"></a>Expression sandbox

Apps must ensure expressions are evaluated in a safe sandbox context. As such only certain objects may be referred to within an expression:

| Sandbox object | Description |
| -------------- | ----------- |
| `data`         | The current form data being stored. Should be kept fresh in real-time using UI binding techniques. |
| `env`          | Some environmental information, e.g. the user's name, if the app has access to an internet connection etc. |

##### __`env` object properties__

Apps are expected to provide the following details via an `env` object when evaluating expressions:

| Property         | Type      | Description |
| ---------------- | --------- | ----------- |
| `username`       | `string`  | Username of the the user currently using the form. |
| `startedOffline` | `boolean` | Indicates if the form was started online, or not. |

##  <a name="reference"></a>Reference

### <a name="top-level"></a>Top-Level Properties

The top-level object defining a form comprises of several properties:

| Property         | Type      | Description | Required?   |
| ---------------- | --------- | ----------- | ----------- |
<% topLevelProperties.forEach(function(topLevelProperty) { -%>
| `<%= topLevelProperty.name %>` | `<%= topLevelProperty.type%>` | <%= topLevelProperty.desc %> | `<%= topLevelProperty.required%>` |
<% }) %>


### <a name="properties"></a>Widget Properties

Each `widget` object comprise of some properties:

| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% properties.forEach(function(property) { -%>
| `<%= property.name%>` | `<%= property.type %>` | <%= property.title %> |
<% })-%>
| `attributes` | `object` | A key/value object for configuring each widget - the content of which is dependent on the widget's `type`. |

### <a name="attributes"></a>Widget Attributes

Formscript `<%= version %>` supports a set of <%= attributes.length %> common attributes from which widgets can be configured.
Not one widget-type requires all these attributes. Attributes are often optional and some widget-types don't need an `attributes` object at all.
 
| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% attributes.forEach(function(attribute) { -%>
| `<%= attribute.name%>` | `<%= attribute.type %>` | <%= attribute.title %> |
<% }) %>

### <a name="list"></a>Widget List

<% widgets.forEach(function(widget) { -%>

<hr>

## The <a name="list-<%= widget.type -%>"></a>`<%= widget.type%>` widget

__<%= widget.title %>__

__Example__

``` json
<%- widget.example %>

```

__Properties__

<% widget.propertySummary.forEach(function(prop) { -%>

__`<%= prop.name -%>`:__ <%= prop.text -%>

<% }) %>


<% }) %>

<hr>

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwmfs%2Fformscript.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fwmfs%2Fformscript?ref=badge_large)
