# Formscript Specification
### Version `<%= version %>`

## <a name="goal"></a>Goal

The goal of  __Formscript__ is to provide a lean vocabulary to describe non-trivial form content.

## <a name="introduction"></a>Introduction

From the off, it's perhaps worth noting Formscript isn't tied to any frontend framework or implementation... it's a JSON-based language (with tooling to provide YAML support) to _describe_ form content.

__There's no HTML or clever CSS to be found here!__

* Instead, within [`/packages`](https://github.com/wmfs/Formscript/tree/master/packages) you can find various tools (such as a validator and template builder) to help work with Formscript.
* Please note, this is a [Lerna](https://lernajs.io/)-powered monorepo... please consider the `README.md` within each [package](https://github.com/wmfs/Formscript/tree/master/packages) for more specific information.

### <a name="simple"></a>Simple Example

``` javascript

const validator = require('Formscript-schema').validateForm

const result = validator(
<%- simpleExample -%>
)

if (result.formContentValid) {
  // All is well!!
} else {
  // Do something with result.errors array.
}

```

## <a name="widgets"></a>Widgets

__As shown in the example above, a form definition is mainly a `formContent` array containing 1 or more objects.__

* To avoid overloading frontend-terms like 'component', Formscript refers to each object in the `formContent` array as a __widget__.
* Widgets can be interactive (`text`, `number`, `map` etc.) and non-interactive (`heading`, `stickyNote` etc.)
* The order that `Widget` objects appear within `formContent` is important... representing the order users should encounter them.
* Formscript offers a fixed set of configurable widgets. Need another widget-type entirely or extra config? [Pull requests are very welcome!](https://github.com/wmfs/Formscript/blob/master/CONTRIBUTING.md)
* Note that widgets can be arranged into "sets" to help define from structure (perhaps splitting a large form into sections, or implementing wizard interfaces).

###  <a name="summary"></a>Widget Summary

To help get a feel about what's possible in Formscript, here's a quick summary of the <%= widgets.length %> widgets supported in version `<%= version %>`:

| Widget Type      | Description |
| -----------      | ----------- |
<% widgets.forEach(function(widget) { -%>
| `<%= widget.type%>` | <%= widget.title %> |
<% }) %>

* More detail is available in the Reference section.

### <a name="properties"></a>Widget Properties

Widget objects comprise of some properties:

| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% properties.forEach(function(property) { -%>
| `<%= property.name%>` | `<%= property.type %>` | <%= property.title %> |
<% })-%>
| `attributes` | `object` | A key/value object for tailoring each widget - the content of which is dependent on the widget's `type`. |

<!--| Property     | Mandatory? | Description |-->
<!--| `id`         | Depends     | A string which uniquely identifies the widget amongst others found within this `formContent` array. Note a small set of widgets don't require an `id` value, but most will. |-->
<!--| `type`       | Yes        | A string indicating the type of widget to render (e.g. `text`, `number`, `select` etc.) See the Reference section for  complete list. |-->
<!--| `showWhen`   | No         | A string containing an expression, that if truthy will cause the widget to appear within the UI, else it shouldn't be shown to the user. |-->
<!--| `attributes` | No         | An object of key/value keys which help configure the widget - the exact keys supported will depend on the widget's `type`. |-->


### <a name="attributes"></a>Widget Attributes

Formscript `<%= version %>` supports a set of <%= attributes.length %> attributes from which widgets can be configured. Not all widget-types support all attributes - attributes are often optional and some widget-types don't need attributes at all.
 
| Attribute Name | Type | Description |
| -------------- | -----| ----------- |
<% attributes.forEach(function(attribute) { -%>
| `<%= attribute.name%>` | `<%= attribute.type %>` | <%= attribute.title %> |
<% }) %>

## <a name="expressions"></a>Expressions

Formscript uses __expressions__ to help bring things to life. Expressions are used to:

* Conditionally show/hide widgets depending on values as they are entered
* Validate form content based on more complex rules
* Affect the contents of enumerations 
* Default dynamic values

```json
{
  "formContent": [
    {
      "id": "userWantsToGiveFeedback",
      "type": "switch",
      "attributes": {
        "default": false,
        "label": "Do you want to leave feedback?"        
      }
    },
    {
      "id": "feedback",
      "showWhen": "data.userWantsToGiveFeedback",
      "type": "textarea",
      "attributes": {
        "label": "Feedback",
        "description": "Please tell us how you feel!"
      }
    }
  ]
}
```

__In the example above we have two widgets:__ 

* The first is a boolean on/off `switch` widget (with the `id` of `userWantsToGiveFeedback`) which is by default set to `false`.
* The second widget is a big textbox (with the `id` of `feedback`) for collecting feed back from the user.

The `feedback` widget should only show if the `userWantsToGiveFeedback` switch is thrown on (i.e. `true`).

There are a few new things going on here. First most types of widget (here the `switch` and `textarea` types) are expected to read and write their values to a `data` object, using their respective `id`  as keys.
Furthermore, this `data` object should be made available within expressions - this allows our `feedback` widget to behave in the expected way:

```json
{"showWhen": "data.userWantsToGiveFeedback"}
``` 

Here, `data` is one of two context objects that should be offered to expressions, the other is `env`.

```json
{
  "formContent": [
    {
      "id": "freeTextAddresses",
      "showWhen": "env.startedOffline",
      "type": "text",
      "attributes": {
        "label": "Do you want to leave feedback?",
        "description": "Offline! Enter a free-text address :-("        
      }
    }
  ]
}
```

In the example above, a fallback `freeTextAddress` text-box widget should only appear if the user is engaging with the form in an 'offline' capacity. 
 
Expect the `env` object to offer the following properties:

__`env` object properties__

| Property | Type | Description |
| `started` | `string` | Timestamp of when the form was started on the client device. Used|
| `startedOffline` | `boolean` | Indicates if the form was started offline or not. | 


## <a name="sections"></a>About sections

Form content in Formscript is pretty-much "flat"... things aren't split into different "section" objects at the top-level (though repeating/nested groups are supported, more on that later).

* Defining sections to aid navigation of larger forms is still entirety possible using Formscript though - simply add a `section` widget amongst your other widgets.
* This is a design decision to help align Formscript better with mobile implementations.
* The following example shows how widgets can be split across _About you_ and _Conclusion_ sections, by interspersing `section` widgets:

``` json
{
  "contents": [
    {
      "type": "section",
      "attributes": {
        "heading": "About you",
        "description": "Enter some details about yourself..."
      }
    },
    {
      "id": "firstName",
      "type": "text",
      "attributes": {
        "label": "First name"
      }
    },
    {
      "type": "section",
      "attributes": {
        "heading": "Conclusion",
        "description": "All done!"
      }
    },
    {
      "id": "notes",
      "type": "text",
      "attributes": {
        "label": "Any other comments?"
      }
    }
  ]
}
```

##  <a name="reference"></a>Reference

## <a name="license"></a>License
[MIT](https://github.com/wmfs/form-script/blob/master/LICENSE)
